name: Deploy ASP.NET Core App to Azure App Service

on:
  push:
    branches:
      - main # Ensure this matches your main branch name
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  AZURE_WEBAPP_NAME: lostandfound # Replace with your App Service name
  AZURE_WEBAPP_PACKAGE_PATH: '.' # Adjust if your build output is in a subfolder, e.g., './publish'
  DOTNET_VERSION: '8.x' # Ensure this matches your project's target .NET version
  EF_CORE_VERSION: '8.0.*' # Ensure this matches your Entity Framework Core NuGet package version

jobs:
  build-and-deploy:
    runs-on: windows-latest # Using Windows agent as it's an ASP.NET Core app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Calculate the exact project path. This accounts for the D:\a\<repo>\<repo> structure
    - name: Set Project Directory Variable
      id: set_project_dir
      run: |
        $repoName = (Get-Item ${{ github.workspace }}).Name
        # Construct the path using string concatenation or alternative Join-Path syntax
        $projectPath = "${{ github.workspace }}\${{ github.repository }}" -replace "$repoName\\$repoName", "$repoName" # This attempts to correct the duplicated repo name
        $projectPath = Join-Path $projectPath "Project" # <--- UPDATED: Correct Join-Path usage
        echo "PROJECT_DIR=$projectPath" >> $env:GITHUB_OUTPUT
        echo "Debug: Project path calculated as $projectPath" # For debugging
      shell: powershell

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ steps.set_project_dir.outputs.PROJECT_DIR }}

    - name: Build the application
      run: dotnet build --configuration Release --no-restore
      working-directory: ${{ steps.set_project_dir.outputs.PROJECT_DIR }}

    - name: Publish the application
      # Publishes the application to a 'publish' folder at the root of the workspace
      run: dotnet publish --configuration Release --no-build --output ${{ github.workspace }}/publish
      working-directory: ${{ steps.set_project_dir.outputs.PROJECT_DIR }}

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'Production' # Or your specific deployment slot
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} # Ensure this secret is set in GitHub
        package: ${{ github.workspace }}/publish # Package path from the publish step

    # --- Database Migrations (Crucial for Schema Updates) ---
    # This section ensures your Azure SQL Database schema is up-to-date
    # after your application is deployed.
    - name: Install dotnet-ef global tool
      # Install dotnet-ef global tool into the runner's environment
      # The --version should match your Entity Framework Core NuGet package version
      run: dotnet tool install --global dotnet-ef --version ${{ env.EF_CORE_VERSION }}

    - name: Add dotnet-ef to PATH for current session
      # Explicitly add the tools directory to PATH for the current job session
      # This addresses the "command not recognized" issue in PowerShell on Azure runners
      run: |
        $env:PATH = $env:PATH + ";C:\Users\runneradmin\.dotnet\tools" # Default path for global tools on windows-latest runner
      shell: powershell

    - name: Run EF Core Database Migrations
      # Execute database migrations against your Azure SQL Database
      # --project and --startup-project point to your main project file (e.g., 'Project.csproj')
      # The working-directory MUST be where your .csproj file resides for EF Core to find it.
      run: dotnet-ef database update --project "Project.csproj" --startup-project "Project.csproj"
      working-directory: ${{ steps.set_project_dir.outputs.PROJECT_DIR }}
      env:
        # ASPNETCORE_ENVIRONMENT is typically set in Azure App Service config,
        # but can be set here if needed for migration-specific logic
        ASPNETCORE_ENVIRONMENT: Production
