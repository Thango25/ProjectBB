<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Lost&Found</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Project.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-light">
            <div class="container-fluid px-5">
                <a class="navbar-brand fw-bold fs-3" asp-area="" asp-controller="Home" asp-action="Index">Lost&Found</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item mx-2">
                            <a class="nav-link text-white" asp-area="" asp-controller="Items" asp-action="Index">
                                <i class="fas fa-upload me-1"></i> Upload Item
                            </a>
                        </li>

                        <partial name="_LoginPartial" />
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <main role="main" class="flex-grow-1">
        @RenderBody()
    </main>

    <footer class="footer text-center">
        <div class="container-fluid px-5">
            &copy; 2025 - Lost&Found
        </div>
    </footer>
    <!-- Verify Claim Modal -->
    <div class="modal fade" id="verifyClaimModal" tabindex="-1" aria-labelledby="verifyClaimModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content rounded-3 shadow">
                <div class="modal-header">
                    <h5 class="modal-title" id="verifyClaimModalLabel">Verify Claim</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="verificationQuestion" class="fw-bold"></p>
                    <input type="text" id="verificationAnswer" class="form-control" placeholder="Enter your answer here" />
                    <input type="hidden" id="verifyItemId" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="submitVerificationBtn" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </div>
    </div>


    <div id="toast-container" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;"></div>


    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>

    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // Create a new SignalR HubConnection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub") // The hub URL
            .build();

        // Start the connection
        connection.start().catch(err => console.error(err.toString()));
        document.addEventListener('DOMContentLoaded', function () {
               // Fetch unread notifications from the database
               fetch('/api/Notification/GetUnread')
                   .then(response => {
                       if (!response.ok) {
                           throw new Error('Could not fetch notifications.');
                       }
                       return response.json();
                   })
                   .then(notifications => {
                       notifications.forEach(notification => {
                           // Use your existing function to add notifications to the UI
                           addNotification(notification.title, notification.message, notification.itemId, notification.claimerId);
                       });
                   })
                   .catch(error => console.error("Error fetching notifications:", error));
           });

        // Add a new parameter for the notificationId
        function addNotification(title, message, notificationId, itemId, claimerId) {
            const notificationDropdown = document.getElementById("notificationDropdown");
            const notificationCountBadge = document.getElementById("notificationCount");

            const noNotificationsItem = notificationDropdown.querySelector('.dropdown-item.text-muted');
            if (noNotificationsItem) {
                noNotificationsItem.remove();
            }

            const newNotificationItem = document.createElement("li");
            newNotificationItem.classList.add('dropdown-item');
            newNotificationItem.style.whiteSpace = 'normal';

            newNotificationItem.innerHTML = `
                <p class="mb-1 fw-bold">${title}</p>
                <p class="mb-2 text-muted">${message}</p>
                <div class="d-flex justify-content-between">
                    <button class="btn btn-sm btn-success approve-btn" data-notification-id="${notificationId}">Approve</button>
                    <button class="btn btn-sm btn-danger decline-btn" data-notification-id="${notificationId}">Decline</button>
                </div>
            `;

            notificationDropdown.prepend(newNotificationItem);

            const approveBtn = newNotificationItem.querySelector('.approve-btn');
            const declineBtn = newNotificationItem.querySelector('.decline-btn');

            approveBtn.addEventListener('click', function() {
                handleClaimApproval(notificationId);
                newNotificationItem.remove();
                updateNotificationCount();
            });

            declineBtn.addEventListener('click', function() {
                handleClaimDecline(notificationId);
                newNotificationItem.remove();
                updateNotificationCount();
            });

            updateNotificationCount();
        }

        // These functions now only need to send the notificationId
        window.handleClaimApproval = function(notificationId) {
            connection.invoke("ApproveClaim", notificationId)
                .catch(err => console.error("Error approving claim:", err.toString()));
        };

        window.handleClaimDecline = function(notificationId) {
            connection.invoke("DeclineClaim", notificationId)
                .catch(err => console.error("Error declining claim:", err.toString()));
        };

        // Helper function to update the notification count badge
        function updateNotificationCount() {
            const notificationDropdown = document.getElementById("notificationDropdown");
            const notificationCountBadge = document.getElementById("notificationCount");
            const count = notificationDropdown.querySelectorAll('li.dropdown-item').length;
            notificationCountBadge.textContent = count;
            notificationCountBadge.style.display = count > 0 ? 'inline-block' : 'none';
        }

        connection.on("ReceiveNotification", function(title, message, notificationId, itemId, claimerId) {
            // Note the added parameters
            addNotification(title, message, notificationId, itemId, claimerId);
            showToast(title, message);
        });

       window.sendClaimNotification = function (ownerId, itemId, currentUserId) {
            if (ownerId && currentUserId && connection.state === signalR.HubConnectionState.Connected) {
                connection.invoke("SendClaimNotificationToOwner", ownerId, itemId, currentUserId)
                    .catch(err => console.error("Error sending claim notification:", err.toString()));
            } else {
                console.error("Owner ID, Item ID, or User ID missing OR SignalR not connected.");
            }
        };

    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>