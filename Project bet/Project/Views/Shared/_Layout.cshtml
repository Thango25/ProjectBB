<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Lost&Found</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Project.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-light">
            <div class="container-fluid px-5">
                <a class="navbar-brand fw-bold fs-3" asp-area="" asp-controller="Home" asp-action="Index">Lost&Found</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item mx-2">
                            <a class="nav-link text-white" asp-area="" asp-controller="Items" asp-action="Index">
                                <i class="fas fa-upload me-1"></i> Upload Item
                            </a>
                        </li>
                        <partial name="_LoginPartial" />
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <main role="main" class="flex-grow-1">
        @RenderBody()
    </main>

    <footer class="footer text-center">
        <div class="container-fluid px-5">
            &copy; 2025 - Lost&Found
        </div>
    </footer>

    <!-- Toast notification container -->
    <div id="toast-container" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;"></div>

    <!-- Verification Modal -->
    <div class="modal fade" id="verifyClaimModal" tabindex="-1" aria-labelledby="verifyClaimModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content rounded-3 shadow">
                <div class="modal-header">
                    <h5 class="modal-title" id="verifyClaimModalLabel">Verify Claim</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="verificationQuestion" class="fw-bold"></p>
                    <input type="text" id="verificationAnswer" class="form-control" placeholder="Enter your answer here" />
                    <input type="hidden" id="verifyItemId" />
                    <input type="hidden" id="verifyOwnerId" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="submitVerificationBtn" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

    <!-- SignalR Client Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>

    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // ========================================================
        // Toast notification helper
        // ========================================================
        function showToast(title, message) {
            const container = document.getElementById('toast-container');
            const toastHtml = `
                <div class="toast align-items-center text-white bg-primary border-0" role="alert"
                     aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
                    <div class="d-flex">
                        <div class="toast-body">
                            <strong>${title}</strong><br>${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto"
                                data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>`;
            container.insertAdjacentHTML('beforeend', toastHtml);
            const toastEl = container.lastElementChild;
            new bootstrap.Toast(toastEl).show();
        }

        // ========================================================
        // SignalR connection setup
        // ========================================================
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub", { withCredentials: true }) // Auth cookies sent
            .withAutomaticReconnect()
            .build();

        connection.start()
            .then(() => console.log("✅ SignalR Connected"))
            .catch(err => console.error("❌ SignalR Connection Error:", err.toString()));



        // ========================================================
        // Load notifications from the database on login / refresh
        // ========================================================
        async function loadStoredNotifications() {
            try {
                const response = await fetch('/api/notifications/user');
                if (!response.ok) return;
                const data = await response.json();

                const dropdown = document.getElementById("notificationDropdown");
                const badge = document.getElementById("notificationCount");

                dropdown.innerHTML = ""; 

                if (data.length === 0) {
                    dropdown.innerHTML = `<li><a class="dropdown-item text-muted">No notifications yet</a></li>`;
                    badge.style.display = "none";
                    return;
                }

                let count = 0;
                data.forEach(n => {
                    const newItem = document.createElement("li");
                    newItem.innerHTML = `
                        <a class="dropdown-item" href="#">
                            <p class="mb-0 fw-bold">${n.title}</p>
                            <p class="mb-0 text-muted small">${n.message}</p>
                            <p class="mb-0 text-secondary small"><i class="fas fa-clock"></i> ${n.createdAt}</p>
                        </a>`;
                    dropdown.appendChild(newItem);
                    count++;
                });

                badge.textContent = count;
                badge.style.display = 'inline-block';
            } catch (err) {
                console.error("❌ Error loading notifications:", err);
            }
        }

        document.addEventListener('DOMContentLoaded', loadStoredNotifications);


        // ========================================================
        // Notification rendering logic
        // ========================================================
        function addNotification(title, message) {
            const dropdown = document.getElementById("notificationDropdown");
            const badge = document.getElementById("notificationCount");

            let content = `<p class="mb-0 fw-bold">${title}</p><p class="mb-0 text-muted">${message}</p>`;

            try {
                const payload = JSON.parse(message);
                if (payload.NotificationType === "ClaimAttempt") {
                    content = `
                        <p class="mb-0 fw-bold text-danger">🚨 NEW CLAIM: ${payload.ItemTitle}</p>
                        <p class="mb-0 text-muted small">Q: ${payload.VerificationQuestion}</p>
                        <p class="mb-0 text-muted small">A: ${payload.ClaimantAnswer} (${payload.VerificationStatus})</p>
                        <div class="mt-2 btn-group" role="group">
                            <button type="button" class="btn btn-sm btn-success action-btn"
                                data-action="approve"
                                data-item-id="${payload.ItemId}"
                                data-claimant-id="${payload.ClaimantId}">Approve</button>
                            <button type="button" class="btn btn-sm btn-danger action-btn"
                                data-action="delete"
                                data-item-id="${payload.ItemId}"
                                data-claimant-id="${payload.ClaimantId}">Delete</button>
                        </div>`;
                }
            } catch (e) { /* Fallback: plain message */ }

            // Remove default placeholder
            const empty = dropdown.querySelector('.dropdown-item.text-muted');
            if (empty) empty.remove();

            // Add new notification
            const newItem = document.createElement("li");
            newItem.innerHTML = `<a class="dropdown-item" href="#">${content}</a>`;
            dropdown.prepend(newItem);

            // Update badge
            const currentCount = parseInt(badge.textContent) || 0;
            badge.textContent = currentCount + 1;
            badge.style.display = 'inline-block';
        }

        // Receive normal notifications
        connection.on("ReceiveNotification", (title, message) => {
            addNotification(title, message);
            showToast(title, message);
        });

        // Receive structured notifications
        connection.on("ReceiveDetailedNotification", (title, payload) => {
            addNotification(title, payload);
            showToast(title, "A new claim attempt requires your attention.");
        });

            // ========================================================
        // Approve/Delete Claim actions with badge update
        // ========================================================
        $(document).on('click', '.action-btn', function (e) {
            e.stopPropagation();
            const btn = $(this);
            const action = btn.data('action');
            const itemId = btn.data('itemId');
            const claimantId = btn.data('claimantId');
            let url = '', successMessage = '';

            if (action === 'approve') {
                url = '/Items/ApproveClaim';
                successMessage = 'Claim approved! Claimant has been notified.';
            } else if (action === 'decline') {
                url = '/Items/DeleteClaim';
                successMessage = 'Claim dismissed, and claimant has been notified.';
            }

            if (!url) return;

            $.post(url, { itemId, claimantId })
                .done(response => {
                    if (response.success) {
                        showToast("Success", successMessage);

                        // Remove the notification from the dropdown
                        const li = btn.closest('li');
                        li.remove();

                        // Update badge count
                        const badge = document.getElementById("notificationCount");
                        let currentCount = parseInt(badge.textContent) || 0;
                        currentCount = Math.max(currentCount - 1, 0);
                        badge.textContent = currentCount;
                        if (currentCount === 0) badge.style.display = 'none';
                    } else {
                        showToast("Error", response.message || "Operation failed.");
                    }
                })
                .fail(() => showToast("Error", "Server error occurred."));
        });

        // ========================================================
        // Verification modal logic
        // ========================================================
        window.openClaimVerificationModal = function (itemId, question, ownerId) {
            document.getElementById('verifyItemId').value = itemId;
            document.getElementById('verificationQuestion').textContent = question;
            document.getElementById('verifyOwnerId').value = ownerId;
            document.getElementById('verificationAnswer').value = '';

            new bootstrap.Modal(document.getElementById('verifyClaimModal')).show();
        };

        document.getElementById('submitVerificationBtn').addEventListener('click', function () {
            const itemId = $('#verifyItemId').val();
            const answer = $('#verificationAnswer').val();
            const ownerId = $('#verifyOwnerId').val();

            if (!itemId || !ownerId) {
                showToast("Error", "Incomplete claim information.");
                return;
            }

            $.post('/Items/SendClaimNotification', { itemId, ownerId, answer })
                .done(response => {
                    if (response.success) showToast("Notification Sent", response.message);
                    else showToast("Error", response.message || "Notification failed.");
                    bootstrap.Modal.getInstance($('#verifyClaimModal')[0]).hide();
                })
                .fail(() => {
                    showToast("Error", "Communication error. Try again.");
                    bootstrap.Modal.getInstance($('#verifyClaimModal')[0]).hide();
                });
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
