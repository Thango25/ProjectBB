<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Lost&Found</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Project.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-light">
            <div class="container-fluid px-5">
                <a class="navbar-brand fw-bold fs-3" asp-area="" asp-controller="Home" asp-action="Index">Lost&Found</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item mx-2">
                            <a class="nav-link text-white" asp-area="" asp-controller="Items" asp-action="Index">
                                <i class="fas fa-upload me-1"></i> Upload Item
                            </a>
                        </li>



                        <partial name="_LoginPartial" />
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <main role="main" class="flex-grow-1">
        @RenderBody()
    </main>

    <footer class="footer text-center">
        <div class="container-fluid px-5">
            &copy; 2025 - Lost&Found 
        </div>
    </footer>

    <div id="toast-container" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;"></div>


    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <!-- SignalR Client Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>

    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/notificationHub")
                .build();

            connection.start().catch(err => console.error(err.toString()));

            const notificationDropdown = document.getElementById("notificationDropdown");
            const notificationCount = document.getElementById("notificationCount");

            // Handle incoming notifications
            connection.on("ReceiveNotification", (title, message, verifyUrl) => {
                const newNotification = document.createElement("li");

                // Add the basic notification content
                let notificationContent = `
                    <a class="dropdown-item" href="#">
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1">${title}</h6>
                        </div>
                        <p class="mb-1">${message}</p>
                    </a>`;

                // If a verifyUrl is provided, add the button to the notification.
                if (verifyUrl) {
                    notificationContent += `
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item text-primary" href="${verifyUrl}">
                            <i class="fas fa-check-circle"></i> Verify Claim
                        </a>`;
                }

                newNotification.innerHTML = notificationContent;

                notificationDropdown.prepend(newNotification);

                // Remove the "No new notifications" placeholder
                const placeholder = notificationDropdown.querySelector('.dropdown-item.text-muted');
                if (placeholder) {
                    placeholder.remove();
                }

                let count = parseInt(notificationCount.innerText);
                notificationCount.innerText = count + 1;
                notificationCount.style.display = "inline";
            });

            // Handle the dropdown toggle event to reset the counter
            const notificationDropdownToggle = document.getElementById("navbarNotificationDropdown");
            if (notificationDropdownToggle) {
                notificationDropdownToggle.addEventListener("click", function () {
                    notificationCount.innerText = "0";
                    notificationCount.style.display = "none";
                });
            }

            // Attach Claim button click event
            document.querySelectorAll(".claim-btn").forEach(button => {
                button.addEventListener("click", function () {
                    const itemId = this.getAttribute("data-item-id");

                    fetch(`/Items/Claim/${itemId}`, {
                        method: "POST",
                        headers: {
                            "X-Requested-With": "XMLHttpRequest"
                        }
                    }).then(response => {
                        if (response.ok) {
                            alert("Claim request sent successfully!");
                        } else {
                            alert("Failed to claim item. Please try again later.");
                        }
                    }).catch(err => {
                        console.error("Error during claim request:", err);
                        alert("An error occurred. Please check the console.");
                    });
                });
            });
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>