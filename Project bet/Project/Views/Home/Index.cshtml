@model Project.Models.HomeViewModel
@{
    ViewData["Title"] = "Home Page";
}

<section class="hero-section">
    <div class="hero-overlay"></div>
    <div class="container-fluid px-5">
        <div class="hero-content text-center text-white">
            <h1 class="hero-title mb-4">Find What You Lost or Report What You Found</h1>
            <p class="hero-subtitle mb-5">Connecting lost items with their owners</p>

            <div class="search-box bg-white p-4 rounded shadow d-flex justify-content-center">
                <form asp-controller="Items" asp-action="Search" method="get" class="w-100">
                    <div class="row g-2 justify-content-center">
                        <div class="col-md-3">
                            <select name="type" class="form-select location-input py-3">
                                <option value="">Select Item Type</option>
                                <option value="Lost">Lost</option>
                                <option value="Found">Found</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <select name="categoryId" class="form-select location-input py-3">
                                <option value="">Select Item Category</option>
                                @if (Model?.Categories != null && Model.Categories.Any())
                                {
                                    foreach (var category in Model.Categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                }
                                else
                                {
                                    <option disabled>No categories available</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button type="submit" class="btn search-btn w-100 py-3">SEARCH</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>

<section class="section bg-light">
    <div class="container-fluid px-5">
        <div id="categoriesCarousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
                @{
                    int chunkSize = 6;
                    int totalChunks = (Model?.Categories != null && Model.Categories.Any())
                    ? (int)Math.Ceiling(Model.Categories.Count / (double)chunkSize)
                    : 0;
                }

                @for (int i = 0; i < totalChunks; i++)
                {
                    var chunk = Model.Categories.Skip(i * chunkSize).Take(chunkSize).ToList();
                    var activeClass = i == 0 ? "active" : "";

                    <div class="carousel-item @activeClass">
                        <div class="row g-4">
                            @foreach (var category in chunk)
                            {
                                <div class="col-xl-2 col-lg-3 col-md-4 col-6">
                                    <a asp-controller="Items" asp-action="ByCategory" asp-route-categoryId="@category.Id" class="card h-100 border-0 shadow-sm hover-effect text-decoration-none text-dark">
                                        <div class="card-body text-center">
                                            <i class="@category.IconClass fa-3x mb-3 text-primary"></i>
                                            <h5 class="card-title">@category.Name</h5>
                                        </div>
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <button class="carousel-control-prev" type="button" data-bs-target="#categoriesCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon bg-primary rounded-circle p-3" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#categoriesCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon bg-primary rounded-circle p-3" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
    </div>
</section>

<section class="section bg-light">
    <div class="container-fluid px-5">
        @if (Model?.RecentLostItems == null || !Model.RecentLostItems.Any())
        {
            <p class="text-center text-muted w-100">No lost items have been reported yet.</p>
        }
        else
        {
            <div id="lostItemsCarousel" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @{
                        int lostChunkSize = 4;
                        var lostChunks = Model.RecentLostItems.Chunk(lostChunkSize);
                    }
                    @foreach (var (chunk, index) in lostChunks.Select((item, i) => (item, i)))
                    {
                        <div class="carousel-item @(index == 0 ? "active" : "")">
                            <div class="row g-4">
                                @foreach (var item in chunk)
                                {
                                    <div class="col-xl-3 col-lg-4 col-md-6">
                                        <div class="card h-100 border-0 shadow-sm hover-effect">
                                            @if (!string.IsNullOrEmpty(item.PhotoPath))
                                            {
                                                <img src="~/uploads/@item.PhotoPath" class="card-img-top" alt="@item.Title" style="height: 200px; object-fit: cover;">
                                            }
                                            else
                                            {
                                                <div class="placeholder-image d-flex align-items-center justify-content-center bg-light text-muted" style="height: 200px;">
                                                    <span>No Image</span>
                                                </div>
                                            }
                                            <div class="card-body">
                                                <h5 class="card-title">@item.Title</h5>
                                                <ul class="list-unstyled">
                                                    <li><strong>Description:</strong> @item.Description</li>
                                                    <li><strong>Date:</strong> @item.DateLost.ToShortDateString()</li>
                                                    <li><strong>Location:</strong> @item.Location</li>
                                                </ul>
                                            </div>
                                            <div class="card-footer bg-white border-0 d-flex justify-content-between">
                                                <a asp-controller="Items" asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-primary">View Details</a>
                                                <button type="button" class="btn btn-primary claim-btn" data-item-id="@item.Id" data-owner-id="@item.PostedById">Claim Item</button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

                @if (Model.RecentLostItems.Count() > lostChunkSize)
                {
                    <button class="carousel-control-prev" type="button" data-bs-target="#lostItemsCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon bg-primary rounded-circle p-3" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#lostItemsCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon bg-primary rounded-circle p-3" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                }
            </div>
        }
    </div>
</section>

<section class="section bg-light">
    <div class="container-fluid px-5">
        @if (Model?.RecentFoundItems == null || !Model.RecentFoundItems.Any())
        {
            <p class="text-center text-muted w-100">No found items have been reported yet.</p>
        }
        else
        {
            <div id="foundItemsCarousel" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @{
                        int foundChunkSize = 4;
                        var foundChunks = Model.RecentFoundItems.Chunk(foundChunkSize);
                    }
                    @foreach (var (chunk, index) in foundChunks.Select((item, i) => (item, i)))
                    {
                        <div class="carousel-item @(index == 0 ? "active" : "")">
                            <div class="row g-4">
                                @foreach (var item in chunk)
                                {
                                    <div class="col-xl-3 col-lg-4 col-md-6">
                                        <div class="card h-100 border-0 shadow-sm hover-effect">
                                            @if (!string.IsNullOrEmpty(item.PhotoPath))
                                            {
                                                <img src="~/uploads/@item.PhotoPath" class="card-img-top" alt="@item.Title" style="height: 200px; object-fit: cover;">
                                            }
                                            else
                                            {
                                                <div class="placeholder-image d-flex align-items-center justify-content-center bg-light text-muted" style="height: 200px;">
                                                    <span>No Image</span>
                                                </div>
                                            }
                                            <div class="card-body">
                                                <h5 class="card-title">@item.Title</h5>
                                                <ul class="list-unstyled">
                                                    <li><strong>Description:</strong> @item.Description</li>
                                                    <li><strong>Date:</strong> @item.DateLost.ToShortDateString()</li>
                                                    <li><strong>Location:</strong> @item.Location</li>
                                                </ul>
                                            </div>
                                            <div class="card-footer bg-white border-0 d-flex justify-content-between">
                                                <a asp-controller="Items" asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-primary">View Details</a>
                                                <button type="button" class="btn btn-primary claim-btn" data-item-id="@item.Id" data-owner-id="@item.PostedById">Claim Item</button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

                @if (Model.RecentFoundItems.Count() > foundChunkSize)
                {
                    <button class="carousel-control-prev" type="button" data-bs-target="#foundItemsCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon bg-primary rounded-circle p-3" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#foundItemsCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon bg-primary rounded-circle p-3" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                }
            </div>
        }
    </div>
</section>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Find all "Claim Item" buttons
            const claimButtons = document.querySelectorAll('.claim-btn');

            claimButtons.forEach(button => {
                button.addEventListener('click', function(event) {
                    event.preventDefault();

                    const itemId = this.getAttribute('data-item-id');
                    const ownerId = this.getAttribute('data-owner-id'); // Get the ownerId

                    if (!itemId || !ownerId) {
                         showToast("Error", "Item ID or Owner ID is missing.");
                         return;
                    }

                    // 1. AJAX call to get the verification question (used for display only)
                    $.ajax({
                        url: '/Items/GetVerificationQuestion',
                        type: 'GET',
                        data: { itemId: itemId },
                        success: function(response) {
                            if (response.success) {
                                // 2. Pass the item ID, question, AND owner ID to the global function
                                window.openClaimVerificationModal(itemId, response.question, ownerId);
                            } else {
                                // Fallback: If no question, use generic text
                                window.openClaimVerificationModal(itemId, "Please enter any details that would prove this item is yours:", ownerId);
                            }
                        },
                        error: function(xhr) {
                            showToast("Error", "Failed to get question. Claiming will proceed on submit.");
                            // Still open the modal if AJAX fails, using generic text
                            window.openClaimVerificationModal(itemId, "Please enter any details that would prove this item is yours:", ownerId);
                        }
                    });
                });
            });
        });
    </script>
}