@page
@model RegisterModel
@{
    ViewData["Title"] = "Create Account";
}

<!-- Smaller Page Header -->
<div class="container-fluid bg-light py-1 mb-1">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-auto">
                <i class="fas fa-user-plus text-primary fs-4"></i>
            </div>
            <div class="col">
                <h2 class="mb-0 fw-bold text-dark fs-5">Create New Account</h2>
                <p class="text-muted mb-0 small">Join us today and get started</p>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid min-vh-100 d-flex flex-column justify-content-start align-items-center p-3 bg-white">
    <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="w-100" style="max-width: 600px;">
        <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>

        <div class="row mb-3">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-user"></i></span>
                    <div class="form-floating flex-grow-1">
                        <input asp-for="Input.Name" class="form-control" autocomplete="name" placeholder="First Name" />
                        <label asp-for="Input.Name">Name</label>
                    </div>
                </div>
                <span asp-validation-for="Input.Name" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-user"></i></span>
                    <div class="form-floating flex-grow-1">
                        <input asp-for="Input.Surname" class="form-control" autocomplete="surname" placeholder="Last Name" />
                        <label asp-for="Input.Surname">Surname</label>
                    </div>
                </div>
                <span asp-validation-for="Input.Surname" class="text-danger"></span>
            </div>
        </div>

        <div class="mb-3">
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-phone"></i></span>
                <div class="form-floating flex-grow-1">
                    <input asp-for="Input.PhoneNumber" class="form-control" autocomplete="tel" aria-required="true" placeholder="Phone Number" />
                    <label asp-for="Input.PhoneNumber">Phone Number <span class="text-danger">*</span></label>
                </div>
            </div>
            <span asp-validation-for="Input.PhoneNumber" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                <div class="form-floating flex-grow-1">
                    <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label asp-for="Input.Email">Email <span class="text-danger">*</span></label>
                </div>
            </div>
            <span asp-validation-for="Input.Email" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-lock"></i></span>
                <div class="form-floating flex-grow-1">
                    <input asp-for="Input.Password" type="password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label asp-for="Input.Password">Password <span class="text-danger">*</span></label>
                </div>
                <button type="button" class="btn btn-outline-secondary" onclick="togglePassword('Input_Password')">
                    <i class="fas fa-eye" id="toggleIcon1"></i>
                </button>
            </div>
            <span asp-validation-for="Input.Password" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-lock"></i></span>
                <div class="form-floating flex-grow-1">
                    <input asp-for="Input.ConfirmPassword" type="password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label asp-for="Input.ConfirmPassword">Confirm Password <span class="text-danger">*</span></label>
                </div>
                <button type="button" class="btn btn-outline-secondary" onclick="togglePassword('Input_ConfirmPassword')">
                    <i class="fas fa-eye" id="toggleIcon2"></i>
                </button>
            </div>
            <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
        </div>

        <div class="d-grid">
            <button id="registerSubmit" type="submit" class="btn btn-primary btn-lg">
                <i class="fas fa-user-plus me-2"></i> Create Account
            </button>
            <div class="text-center mt-3">
                <p>Already have an account? <a asp-page="./Login" asp-route-returnUrl="@Model.ReturnUrl" class="text-decoration-none">Log in here</a></p>
            </div>
        </div>
    </form>
</div>

<!-- Success Modal -->
<div class="modal fade" id="registrationSuccessModal" tabindex="-1" aria-labelledby="registrationSuccessModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="registrationSuccessModalLabel">
                    <i class="fas fa-check-circle me-2"></i>Account Created Successfully!
                </h5>
            </div>
            <div class="modal-body text-center">
                <div class="mb-3">
                    <i class="fas fa-envelope text-primary" style="font-size: 3rem;"></i>
                </div>
                <h5>Welcome to our platform!</h5>
                <p class="mb-3">Your account has been created successfully. We've sent a confirmation email to <strong id="userEmail"></strong>.</p>
                <p class="text-muted">Please check your email and click the confirmation link to activate your account.</p>
            </div>
            <div class="modal-footer justify-content-center">
                <button type="button" class="btn btn-primary" onclick="redirectToLogin()">
                    <i class="fas fa-sign-in-alt me-2"></i>Go to Login
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script>
        function togglePassword(inputId) {
            const input = document.getElementById(inputId);
            const icon = event.target.closest('button').querySelector('i');

            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        // Form submission with AJAX
        document.getElementById('registerForm').addEventListener('submit', function(e) {
            e.preventDefault(); // Prevent default form submission

            const submitBtn = document.getElementById('registerSubmit');
            const originalContent = submitBtn.innerHTML;

            // Show loading state
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Creating Account...';
            submitBtn.disabled = true;

            // Clear previous validation errors
            clearValidationErrors();

            // Get form data
            const formData = new FormData(this);

            // Submit via AJAX
            fetch(this.action || window.location.href, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json'
                }
            })
            .then(async response => {
                const contentType = response.headers.get('content-type');

                if (contentType && contentType.includes('application/json')) {
                    return response.json();
                } else {
                    // If not JSON, it might be an HTML response (error page)
                    const text = await response.text();
                    throw new Error('Server returned HTML instead of JSON. Check server logs.');
                }
            })
            .then(data => {
                if (data.success) {
                    // Show success modal
                    document.getElementById('userEmail').textContent = data.email || document.getElementById('Input_Email').value;
                    const modal = new bootstrap.Modal(document.getElementById('registrationSuccessModal'));
                    modal.show();

                    // Reset form
                    document.getElementById('registerForm').reset();
                    clearValidationErrors();
                } else {
                    // Handle validation errors
                    displayValidationErrors(data.errors);
                }
            })
            .catch(error => {
                console.error('Error:', error);

                // Show user-friendly error message
                const errorDiv = document.querySelector('[asp-validation-summary="ModelOnly"]');
                if (errorDiv) {
                    errorDiv.innerHTML = '<div class="alert alert-danger">An error occurred while creating your account. Please try again.</div>';
                } else {
                    alert('An error occurred. Please try again.');
                }
            })
            .finally(() => {
                // Restore button state
                submitBtn.innerHTML = originalContent;
                submitBtn.disabled = false;
            });
        });

        function clearValidationErrors() {
            // Clear previous errors
            document.querySelectorAll('.text-danger').forEach(el => {
                if (!el.hasAttribute('asp-validation-summary')) {
                    el.textContent = '';
                }
            });
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
        }

        function displayValidationErrors(errors) {
            if (!errors) return;

            // Clear previous errors first
            clearValidationErrors();

            // Display new errors
            for (const [field, messages] of Object.entries(errors)) {
                const input = document.querySelector(`[name="Input.${field}"]`);
                const errorSpan = document.querySelector(`[data-valmsg-for="Input.${field}"]`);

                if (input) input.classList.add('is-invalid');
                if (errorSpan && messages.length > 0) {
                    errorSpan.textContent = messages.join(', ');
                }
            }

            // Handle general model errors
            if (errors[''] || errors['ModelOnly']) {
                const modelErrorDiv = document.querySelector('[asp-validation-summary="ModelOnly"]');
                if (modelErrorDiv) {
                    const generalErrors = errors[''] || errors['ModelOnly'];
                    modelErrorDiv.innerHTML = generalErrors.map(error =>
                        `<div class="alert alert-danger">${error}</div>`
                    ).join('');
                }
            }
        }

        function redirectToLogin() {
            window.location.href = '@Url.Page("./Login", new { ReturnUrl = Model.ReturnUrl })';
        }

        // Real-time password matching validation
        const passwordInput = document.getElementById('Input_Password');
        const confirmPasswordInput = document.getElementById('Input_ConfirmPassword');

        if (passwordInput && confirmPasswordInput) {
            function checkPasswordMatch() {
                if (confirmPasswordInput.value && passwordInput.value !== confirmPasswordInput.value) {
                    confirmPasswordInput.classList.add('is-invalid');
                    confirmPasswordInput.classList.remove('is-valid');
                } else if (confirmPasswordInput.value && passwordInput.value === confirmPasswordInput.value) {
                    confirmPasswordInput.classList.add('is-valid');
                    confirmPasswordInput.classList.remove('is-invalid');
                } else {
                    confirmPasswordInput.classList.remove('is-valid', 'is-invalid');
                }
            }

            passwordInput.addEventListener('input', checkPasswordMatch);
            confirmPasswordInput.addEventListener('input', checkPasswordMatch);
        }
    </script>
}